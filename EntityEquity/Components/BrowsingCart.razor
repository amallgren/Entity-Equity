@using EntityEquity.Common
@using EntityEquity.Components
@using EntityEquity.Data
@using EntityEquity.Hubs
@using Microsoft.AspNetCore.SignalR
@using Microsoft.AspNetCore.SignalR.Client
@using Newtonsoft.Json
@inject CookieBridgeConnection CookieBridgeConnection
@inject IHubContext<EntityHub> HubContext
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JS
<h3>Cart</h3>
@if (Items is not null)
{
    Total = 0;
    foreach(OfferingWithOrderItem item in Items)
    {
        Total += item.Offering.Price * item.OrderItem.Quantity;
        <BrowsingCartItem Offering=@item.Offering OrderItem=@item.OrderItem></BrowsingCartItem>
    }
}
<div style="display:flex;justify-content: space-between; margin-top:15px; font-weight:bold;">
<span>Total</span><span>$<span id="totalAmount" style="text-align:right">@Total</span></span>
</div>
<div style="margin-top:15px;" id="paypal-button-container"></div>
<button type="button" style="width:100%; margin-top:10px;" data-bs-toggle="modal" data-bs-target="#paymentFormModal">Pay</button>
<PaymentFormModal Cookie="@Cookie"></PaymentFormModal>
@code {
    [Parameter]
    public string Cookie { get; set; }
    private List<OfferingWithOrderItem> Items { get; set; }
    private decimal Total { get; set; }
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = CookieBridgeConnection.GetHubConnection("/entityhub", Cookie!);

        hubConnection.On("UpdateOrders", async () =>
        {
            await RefreshCart();
        });

        hubConnection.On("OnFinalizedOrder", async (Order order) =>
        {
            await JS.InvokeVoidAsync("HideModal", new object[1] { "#paymentFormModal" });
            await HubContext.Clients.All.SendAsync("UpdateOrders");
        });

        await hubConnection.StartAsync();

        await RefreshCart();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && hubConnection is not null) {
            var orderId = await hubConnection.InvokeAsync<int>("GetIncompleteOrderNumber");
        }
    }

    private async Task RefreshCart()
    {
        HttpClient httpClient = CookieBridgeConnection.GetHttpClient(Cookie!);
        var response = await httpClient.GetStringAsync(
            $"api/Cart");
        Items = JsonConvert.DeserializeObject<List<OfferingWithOrderItem>>(response)!;

        await InvokeAsync(StateHasChanged);
    }
}

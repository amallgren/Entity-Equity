@using EntityEquity.Common
@using EntityEquity.Data
@using EntityEquity.Extensions
@using EntityEquity.Hubs
@using EntityEquity.Models
@using Microsoft.AspNetCore.SignalR
@using Microsoft.AspNetCore.SignalR.Client
@inject IJSRuntime JS
@inject IHubContext<EntityHub> HubContext
@inject CookieBridgeConnection CookieBridgeConnection

<EditForm OnValidSubmit="ValidSubmit" OnInvalidSubmit="Invalid" Model="@model">
    <DataAnnotationsValidator />
    
    <div class="modal fade" id="addAnInventoryItemModal" tabindex="-1" aria-labelledby="addAnInventoryItemModalLabel" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="addAnInventoryItemModalLabel">Add an inventory item</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
                <div class="row">
                    <Microsoft.AspNetCore.Components.Forms.ValidationSummary />
                </div>
                <div class="row">
                    <label class="col-md-4">Inventories</label>
                    <select id="addAnInventoryItemInventorySelect" multiple @onchange="OnChangeInventory">
                        @if (Inventories != null)
                        {
                            foreach (Inventory inventory in Inventories)
                            {
                                    <option value="@inventory.InventoryId">@inventory.Name</option>
                            }
                        }
                    </select>
                </div>
                <div class="row">
                    <label class="col-md-4">Name</label>
                    <input id="addAnInventoryItemName" class="col-md-8" type="text" @bind-value="model.Name" />
                </div>
                <div class="row">
                    <label class="col-md-4">SKU</label>
                    <input id="addAnInventoryItemSKU" class="col-md-8" type="text" @bind-value="model.SKU" />
                </div>
                <div class="row">
                    <label class="col-md-4">Cost</label>
                    <input id="addAnInventoryItemCost" class="col-md-8" type="text" @bind-value="model.Cost" />
                </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            <button type="submit" class="btn btn-primary">Save changes</button>
          </div>
        </div>
      </div>
    </div>
</EditForm>
@code {
    [Parameter]
    public int[] InventoryIds { get; set; } = new int[0];
    [Parameter]
    public string? Cookie { get; set; }
    private HubConnection? hubConnection;
    private InventoryItemModel model = new();
    private List<Inventory>? Inventories = new();
    private int[] SelectedInventory = new int[0];

    protected override async Task OnInitializedAsync()
    {
        hubConnection = CookieBridgeConnection.GetHubConnection("/entityhub", Cookie!);

        hubConnection.On("OnAddedInventoryItem", async () =>
        {
            await HubContext.Clients.All.SendAsync("UpdateInventoryItems");
        });

        hubConnection.On("UpdateInventories", async () =>
        {
            await UpdateInventories();
        });

        await hubConnection.StartAsync();

        await UpdateInventories();
    }
    private async Task UpdateInventories()
    {
        if (hubConnection is not null)
        {
            Inventories = await hubConnection.InvokeAsync<List<Inventory>>("GetInventories");
            await InvokeAsync(StateHasChanged);
        }
    }
    private async void ValidSubmit()
    {
        foreach (int inventoryId in SelectedInventory)
        {
            model.Inventory = new();
            model.Inventory.InventoryId = inventoryId;
            if (hubConnection is not null)
            {
                await hubConnection.SendAsync("AddInventoryItem", model);
            }
        }
        await JS.InvokeVoidAsync("HideModal", new object[1] { "#addAnInventoryItemModal" });
    }

    private void OnChangeInventory(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            SelectedInventory = ((string[])e.Value).ToIntArray();
        }
    }

    private void Invalid()
    {
        
    }
}

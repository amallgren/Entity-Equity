@using EntityEquity.Common
@using EntityEquity.Components
@using EntityEquity.Data
@using EntityEquity.Models
@using Microsoft.AspNetCore.SignalR.Client
@inject CookieBridgeHubConnection CookieBridgeHubConnection

<div>
<label for="inventories">Inventory</label>
<select id="inventories" @onchange="OnChangeInventory" value="@SelectedInventory">
    @if (Inventories!=null)
    {
        foreach(var inventory in Inventories)
        {
            if (SelectedInventory == 0)
            {
                SelectedInventory = @inventory.InventoryId;
            }
            <option value="@inventory.InventoryId">@inventory.Name</option>
        }
    }
    
</select>
<button type="button" data-bs-toggle="modal" data-bs-target="#addAnInventoryModal">Add An Inventory</button>
</div>
<div style="display:flex;">
    @if (InventoryItems is not null)
    {
        foreach(var inventoryItem in InventoryItems)
        {
            <div>
                @inventoryItem.Name
           </div>
        }
    }
    <div>
        <div>
            <button type="button" data-bs-toggle="modal" data-bs-target="#addAnInventoryItemModal">Add An Inventory Item</button>
        </div>
    </div>
</div>

<component type="typeof(AddAnInventoryItemModal)" render-mode="ServerPrerendered" param-InventoryId="@SelectedInventory" />
<AddAnInventoryItemModal InventoryId="@SelectedInventory.ToString()" Cookie="@Cookie"></AddAnInventoryItemModal>

@code {
    [Parameter]
    public string? Cookie { get; set; }

    private List<Inventory>? Inventories { get; set; }
    private int SelectedInventory { get; set; }
    private List<InventoryItem>? InventoryItems { get; set; }

    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = CookieBridgeHubConnection.GetHubConnection("/entityhub", Cookie!);

        hubConnection.On("UpdateInventories", async () =>
        {
            await UpdateInventories();
        });

        hubConnection.On("UpdateInventoryItems", async () =>
        {
            UpdateInventoryItems(SelectedInventory);
        });

        await hubConnection.StartAsync();

        await UpdateInventories();

        UpdateInventoryItems(SelectedInventory);
    }
    private void OnChangeInventory(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            SelectedInventory = int.Parse((string)e.Value);
            UpdateInventoryItems(SelectedInventory);
        }
    }

    private async Task UpdateInventories()
    {
        if (hubConnection is not null)
        {
            Inventories = await hubConnection.InvokeAsync<List<Inventory>>("GetInventories");
            await InvokeAsync(StateHasChanged);
        }
    }

    private async void UpdateInventoryItems(int selectedInventory)
    {
        if (hubConnection is not null)
        {
            InventoryItems = await hubConnection.InvokeAsync<List<InventoryItem>>("GetInventoryItems", selectedInventory);
            await InvokeAsync(StateHasChanged);
        }
    }
}

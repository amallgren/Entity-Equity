@using EntityEquity.Common
@using EntityEquity.Components
@using EntityEquity.Data
@using EntityEquity.Extensions
@using EntityEquity.Models
@using Microsoft.AspNetCore.SignalR.Client
@inject CookieBridgeConnection CookieBridgeConnection

<div class="flex-wrap-page">
    <div class="action-panel">
        <h2 class="panel-section-title">Filter/Action Target</h2>
        <div class="action-panel-grid">
            <label for="inventories">Inventory</label>
            <select id="inventories" multiple @onchange="OnChangeInventory">
                @if (Inventories!=null)
                {
                    foreach(var inventory in Inventories)
                    {
                        <option value="@inventory.InventoryId">@inventory.Name</option>
                    }
                }
            </select>
        </div>
        <h2 class="panel-section-title">Actions</h2>
        <div class="action-panel-button">
            <button type="button" data-bs-toggle="modal" data-bs-target="#addAnInventoryModal">Add An Inventory</button>
        </div>
        <div class="action-panel-button">
            <button type="button" data-bs-toggle="modal" data-bs-target="#addAnInventoryItemModal">Add An Inventory Item</button>
        </div>
    </div>

    <div style="display:flex;">
        @if (InventoryItems is not null)
        {
            foreach(var inventoryItem in InventoryItems)
            {
                <div class="tile">
                    @inventoryItem.Name
                    <div>
                        Cost: @inventoryItem.Cost
                    </div>
               </div>
            }
        }
        <div>
            <div>
            
            </div>
        </div>
    </div>

</div>

<AddAnInventoryItemModal InventoryIds=@SelectedInventory Cookie="@Cookie"></AddAnInventoryItemModal>

@code {
    [Parameter]
    public string? Cookie { get; set; }

    private List<Inventory>? Inventories { get; set; }
    private int[] SelectedInventory = new int[0];
    private List<InventoryItem>? InventoryItems { get; set; }

    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = CookieBridgeConnection.GetHubConnection("/entityhub", Cookie!);

        hubConnection.On("UpdateInventories", async () =>
        {
            await UpdateInventories();
        });

        hubConnection.On("UpdateInventoryItems", async () =>
        {
            await UpdateInventoryItems();
        });

        await hubConnection.StartAsync();

        await UpdateInventories();

        await UpdateInventoryItems();
    }
    private async void OnChangeInventory(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            SelectedInventory = ((string[])e.Value).ToIntArray();
            await UpdateInventoryItems();
        }
    }

    private async Task UpdateInventories()
    {
        if (hubConnection is not null)
        {
            Inventories = await hubConnection.InvokeAsync<List<Inventory>>("GetInventories");
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task UpdateInventoryItems()
    {
        if (hubConnection is not null)
        {
            InventoryItems = await hubConnection.InvokeAsync<List<InventoryItem>>("GetInventoryItems", SelectedInventory);
            await InvokeAsync(StateHasChanged);
        }
    }
}

@using Common
@using Data
@using EntityEquity.Data.Models;
@using Newtonsoft.Json
@using Microsoft.AspNetCore.SignalR
@using Microsoft.AspNetCore.SignalR.Client
@inject CookieBridgeConnection CookieBridgeConnection
@inject IHttpClientFactory HttpClientFactory
@if (Offerings is not null)
{
    foreach (OfferingWithOrderItem offering in Offerings)
    {
        <PropOffering Offering=@offering Property=@Property Cookie=@Cookie></PropOffering>
    }
}

@code {
    [Parameter]
    public string Cookie { get; set; }
    [Parameter]
    public Property Property { get; set; }
    private List<OfferingWithOrderItem> Offerings { get; set; }
    private HubConnection? hubConnection;
    protected override async Task OnInitializedAsync()
    {
        hubConnection = CookieBridgeConnection.GetHubConnection("/entityhub", Cookie!);
        
        hubConnection.On("UpdateOrders", async () =>
        {
            await UpdateOfferings();
        });
        await hubConnection.StartAsync();

        await UpdateOfferings();
    }
    private async Task UpdateOfferings()
    {
        HttpClient httpClient = CookieBridgeConnection.GetHttpClient(Cookie!);
        var response = await httpClient.GetStringAsync(
            $"api/PropOffering?propertyId={Property.PropertyId}");
        Offerings = JsonConvert.DeserializeObject<List<OfferingWithOrderItem>>(response)!;

        await InvokeAsync(StateHasChanged);
    }
}

@using EntityEquity.Common
@using EntityEquity.Data
@using EntityEquity.Hubs
@using Microsoft.AspNetCore.SignalR
@using Microsoft.AspNetCore.SignalR.Client
@inject CookieBridgeConnection CookieBridgeConnection
@inject IHubContext<EntityHub> HubContext
<div class="prop-offering">

    @if (Offering.Photos is not null && Offering.Photos.Count() > 0)
    {
        <img class="prop-item-image" src="@Offering.Photos.FirstOrDefault().Url" />
    }
    else
    {
        <div class="no-image">No Image</div>
    }
    <div>@Offering.Offering.Name</div>
    <div>@Offering.Offering.Description</div>
    <div>$@Offering.Offering.Price</div>
    <div>
        <button @onclick="OnDecreaseClick" type="button" disabled="@DisableDecrease">-</button>
        <input type="number" @onchange="OnCountChange" value="@Count" />
        <button @onclick="OnIncreaseClick" type="button">+</button>
    </div>
</div>

@code {
    [Parameter]
    public OfferingWithOrderItem Offering { get; set; }
    [Parameter]
    public Property Property { get; set; }
    [Parameter]
    public string Cookie { get; set; }
    public int Count { get; set; } = 0;
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = CookieBridgeConnection.GetHubConnection("/entityhub", Cookie!);

        hubConnection.On("OnUpdatedOrder", async () =>
        {
            await HubContext.Clients.All.SendAsync("UpdateOrders");
        });

        await hubConnection.StartAsync();
    }
    protected override async Task OnParametersSetAsync()
    {
        await SetCount();
    }
    private async Task SetCount()
    {
        if (Offering.OrderItem is not null)
        {
            Count = Offering.OrderItem.Quantity;
            await InvokeAsync(StateHasChanged);
        }
    }
    private bool DisableDecrease 
    {
        get
        {
            return Count == 0;
        }
    }
    private async Task OnCountChange(ChangeEventArgs args)
    {
        if (args.Value is not null)
        {
            Count = int.Parse((string)args.Value);
            await UpdateOrder();
        }
    }
    private async Task OnDecreaseClick()
    {
        if (Count>0)
        {
            Count--;
            await UpdateOrder();
        }
    }
    private async Task OnIncreaseClick()
    {
        Count++;
        await UpdateOrder();
    }

    private async Task UpdateOrder()
    {
        if (hubConnection is not null)
        {
            OrderItem item = new() { Offering = Offering.Offering, Property = Property, Quantity = Count };
            await hubConnection.SendAsync("UpdateOrder", item);
        }
    }
}

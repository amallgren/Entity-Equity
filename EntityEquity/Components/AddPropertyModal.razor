@using EntityEquity.Common
@using EntityEquity.Data
@using EntityEquity.Hubs
@using EntityEquity.Models
@using Microsoft.AspNetCore.SignalR
@using Microsoft.AspNetCore.SignalR.Client
@using System.Net
@inject IJSRuntime JS
@inject IHubContext<EntityHub> HubContext
@inject NavigationManager Navigation
@inject CookieBridge CookieBridge
@inject CookieBridgeConnection CookieBridgeConnection
@implements IAsyncDisposable

<EditForm OnValidSubmit="ValidSubmit" OnInvalidSubmit="Invalid" Model="@model">
    <DataAnnotationsValidator />
    
    <div class="modal fade" id="addPropertyModal" tabindex="-1" aria-labelledby="addPropertyModalLabel" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="addPropertyModalLabel">Add property</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
                <div class="row">
                    <Microsoft.AspNetCore.Components.Forms.ValidationSummary />
                </div>
                <div class="row">
                    <label class="col-md-4">Url Slug</label>
                    <input id="addPropertySlug" class="col-md-8" type="text" @bind-value="model.Slug" />
                </div>
                <div class="row">
                    <label class="col-md-4">Name</label>
                    <input id="addPropertyName" class="col-md-8" type="text" @bind-value="model.Name" />
                </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            <button type="submit" class="btn btn-primary">Save changes</button>
          </div>
        </div>
      </div>
    </div>
</EditForm>
@code {
    [Parameter]
    public string? Cookie { get; set; }

    private HubConnection? hubConnection;
    private PropertyModel model = new();

    protected override async Task OnInitializedAsync()
    {
        hubConnection = CookieBridgeConnection.GetHubConnection("/entityhub", Cookie!);

        hubConnection.On("OnAddedProperty", async () =>
        {
            await HubContext.Clients.All.SendAsync("UpdateProperties");
        });

        await hubConnection.StartAsync();
    }

    private async void ValidSubmit()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("AddProperty", model);
        }
        await JS.InvokeVoidAsync("HideModal", new object[1] { "#addPropertyModal" });
    }

    private void Invalid()
    {
        
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
